{"version":3,"sources":["Icon/Icon.module.scss","Main/Main.module.scss","Main/Header/Header.tsx","Main/Header/index.ts","Icon/Icon.tsx","Icon/index.ts","Main/Main.tsx","Main/index.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","Header","props","className","styles","root","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","aria-disabled","Icon","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,KAAO,qB,gBCAzBD,EAAOC,QAAU,CAAC,KAAO,qB,sLCiDVC,IChDAA,EDCf,SAAgBC,GACd,OACE,uBAAKC,UAAWC,IAAOC,MACrB,uBAAKF,UAAU,iDACb,qBAAGA,UAAU,eAAeG,KAAK,KAAjC,UAGA,0BACEH,UAAU,iBACVI,KAAK,SACLC,cAAY,WACZC,cAAY,aACZC,gBAAc,YACdC,gBAAc,QACdC,aAAW,qBAEX,wBAAMT,UAAU,yBAElB,uBAAKA,UAAU,2BAA2BU,GAAG,aAC3C,sBAAIV,UAAU,cACZ,sBAAIA,UAAU,mBACZ,qBAAGA,UAAU,WAAWG,KAAK,KAA7B,QACO,wBAAMH,UAAU,WAAhB,eAGT,sBAAIA,UAAU,YACZ,qBAAGA,UAAU,WAAWG,KAAK,KAA7B,aAIF,sBAAIH,UAAU,YACZ,qBAAGA,UAAU,WAAWG,KAAK,KAA7B,YAIF,sBAAIH,UAAU,YACZ,qBAAGA,UAAU,oBAAoBG,KAAK,IAAIQ,gBAAc,QAAxD,kB,gBETCC,IC5BAA,EDMf,SAAcb,GACZ,OACE,uBAAKC,UAAWC,IAAOC,MAErB,wBAAMF,UAAU,eAChB,wBAAMA,UAAU,mBAChB,wBAAMA,UAAU,mBAEhB,wBAAMA,UAAU,iBAGhB,wBAAMA,UAAU,eAChB,wBAAMA,UAAU,qB,gBEAPa,IClBAA,EDKf,SAAcd,GACZ,OACE,uBAAKC,UAAWC,IAAOC,MACrB,gBAAC,EAAD,MACA,gBAAC,EAAD,QEGSY,MATf,WACE,OACE,6BACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.ddffb454.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Icon_root__362Vr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Main_logo__1GFdy\"};","import * as React from 'react';\nimport styles from './Header.module.scss';\n\nfunction Header(props: any) {\n  return (\n    <div className={styles.root}>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a className=\"navbar-brand\" href=\"#\">\n          Navbar\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNav\"\n          aria-controls=\"navbarNav\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item active\">\n              <a className=\"nav-link\" href=\"#\">\n                Home <span className=\"sr-only\">(current)</span>\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#\">\n                Features\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#\">\n                Pricing\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link disabled\" href=\"#\" aria-disabled=\"true\">\n                Disabled\n              </a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n  );\n}\n\nexport default Header;\n","import Header from './Header';\n\nexport default Header;\n","import * as React from 'react';\nimport styles from './Icon.module.scss';\n\nimport icon from '../icons8-monster-face-96 (2).svg'\nimport icon2 from '../icons8-sea-shell-90.svg'\nimport icon3 from '../icons8-house-100.svg'\nimport icon4 from '../icons8-money-bag.svg'\n\nfunction Icon(props: any) {\n  return (\n    <div className={styles.root}>\n      {/* <h1>Icon</h1> */}\n      <span className=\"icon-house\" />\n      <span className=\"icon-money-bag\" />\n      <span className=\"icon-telephone\" />\n      \n      <span className=\"icon-monster\" />\n      \n      \n      <span className=\"icon-heart\" />\n      <span className=\"icon-sea-shell\" />\n      \n      {/* <object type=\"image/svg+xml\" data={icon}></object>\n      <object type=\"image/svg+xml\" data={icon2}></object>\n      <object type=\"image/svg+xml\" data={icon3}></object>\n      <object type=\"image/svg+xml\" data={icon4}></object> */}\n    </div>\n  );\n}\n\nexport default Icon;\n","import Icon from './Icon';\n\nexport default Icon;\n","import * as React from 'react';\nimport Map from '../Map';\nimport logoKo from './images/logo-en.png';\nimport Header from './Header';\nimport Icon from '../Icon';\nimport styles from './Main.module.scss';\n\nfunction Main(props: any) {\n  return (\n    <div className={styles.root}>\n      <Header />\n      <Icon />\n\n      {/* <img className={styles.logo} src={logoKo}/> */}\n      {/* <h1>Main</h1> */}\n      {/* <Map /> */}\n    </div>\n  );\n}\n\nexport default Main;\n","import Main from './Main';\n\nexport default Main;\n","import React from 'react';\nimport Main from './Main';\n// import Map from './Map';\nimport GithubCorner from 'react-github-corner';\n\nfunction App() {\n  return (\n    <div>\n      <Main />\n      {/* <GithubCorner href=\"https://github.com/bluewings/koholint\" /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport './styles/style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}