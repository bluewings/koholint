{"version":3,"sources":["Map/useLeaflet.ts","Map/useContainerRect.ts","Map/Map.tsx","Map/index.ts","App.tsx","serviceWorker.js","index.tsx","Map/Map.module.scss"],"names":["LEAFLET_URI","loadScript","src","Promise","resolve","reject","head","document","getElementsByTagName","script","createElement","type","onload","onerror","Error","split","pop","appendChild","useLeaflet","L","useState","ready","setReady","useEffect","a","window","err","useMemo","undefined","all","useContainerRect","elemRef","deps","dependencies","toString","mapFn","e","hasChanged","before","after","JSON","stringify","items","filter","indexOf","watch","length","reduce","prev","key","top","left","right","bottom","width","height","rect_","setRect","rect","useRef","current","requestId","checkRect","cancelAnimationFrame","parentNode","elemRect","getBoundingClientRect","tmpRect","next","requestAnimationFrame","MapInner","deepzoom","root","container","defaultZoom","zoom","getSizeInfo","maxZoom","console","log","fileURI","minZoom","tileImg","tileSizes","innerHTML","map","Math","max","zoomControl","attributionControl","zoomSnap","southWest","unproject","getMaxZoom","northEast","bounds","LatLngBounds","setMaxBounds","setView","lng","lat","Control","Zoom","position","addTo","TileLayer","extend","createTile","coords","done","z","x","y","maxX","maxY","tileSrc","replace","tile","style","tms","continuousWorld","noWrap","defaultRadius","remove","containerStyle","className","styles","ref","deepzoomSize","containerSize","deepzoomW","deepzoomH","containerW","containerH","r1","r2","scale","ceil","pow","Map","props","App","href","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","then","registration","unregister","module","exports"],"mappings":"qNAmBMA,G,MACJ,mEAEIC,EAAa,SAACC,GAClB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAOC,SAASD,MAAQC,SAASC,qBAAqB,QAAQ,GAC9DC,EAASF,SAASG,cAAc,UACtCD,EAAOE,KAAO,kBACdF,EAAOP,IAAMA,EACbO,EAAOG,OAASR,EAChBK,EAAOI,QAAU,kBACfR,EAAO,IAAIS,MAAJ,0BAA6BZ,EAAIa,MAAM,KAAKC,UACrDV,EAAKW,YAAYR,OA4BNS,MAxBf,WAA4C,IAatCC,EAbqC,EACfC,oBAAS,GADM,mBAClCC,EADkC,KAC3BC,EAD2B,KAGzCC,qBAAU,WACR,sBAAC,sBAAAC,EAAA,yDAEMC,OAAON,EAFb,gCAGSlB,EAAWD,GAHpB,OAKCsB,GAAS,GALV,0CAAD,KAOC,IAGH,IAEEH,EAAIM,OAAON,EACX,MAAOO,IAIT,OAAOC,mBAAQ,kBAAON,GAASF,EAAIA,OAAIS,IAAY,CAACP,EAAOF,KC3CvDU,EAAM,CAAC,MAAO,OAAQ,QAAS,SAAU,QAAS,UAqHzCC,EAnHU,SACvBC,EACAC,GAEA,IAAMC,GAAgBD,GAAQ,IAAIE,WAC5BC,EAAQR,mBACZ,iBAAuB,oBAATK,EAAsBA,EAAO,SAACI,GAAD,OAAYA,KACvD,CAACH,IAGGI,EAAaV,mBAAQ,WACzB,GAAoB,oBAATK,EAKT,OAAO,SAACM,EAAaC,GACnB,OAAOC,KAAKC,UAAUH,KAAYE,KAAKC,UAAUT,EAAKO,KAQ1D,IAAMG,GAASV,GAAQ,IAAIW,QAAO,SAACP,GAAD,OAAmC,IAApBP,EAAIe,QAAQR,MACvDS,EAAQH,EAAMI,OAAS,EAAIJ,EAAQb,EAEzC,OAAO,SAACS,EAAaC,GACnB,OAAOM,EAAME,QACX,SAACC,EAAeC,GAAhB,OAAgCD,GAAQV,EAAOW,KAASV,EAAMU,MAC9D,MAGH,EAAEjB,GAAQ,IAAIE,aA/BC,EAiCOd,oBAAc,kBACrCe,EAAM,CACJe,IAAK,KACLC,KAAM,KACNC,MAAO,KACPC,OAAQ,KACRC,MAAO,KACPC,OAAQ,UAxCM,mBAiCXC,EAjCW,KAiCJC,EAjCI,KA4CZC,EAAOC,mBACbD,EAAKE,QAAUJ,EAEf,IAAMK,EAAYF,mBA8DlB,OA5DApC,qBAAU,WAuDR,OAtDkB,SAAZuC,IAEJ,GADAD,EAAUD,SAAWG,qBAAqBF,EAAUD,SAChD7B,EAAQ6B,SAAW7B,EAAQ6B,QAAQI,WAAY,CACjD,IAAMC,EAAWlC,EAAQ6B,QAAQI,WAAWE,wBAGtCC,EAAe,CACnBjB,IAAKe,EAASf,IACdC,KAAMc,EAASd,KACfC,MAAOa,EAASb,MAChBC,OAAQY,EAASZ,OACjBC,MAAOW,EAASX,MAChBC,OAAQU,EAASV,QAwBnB,GAAIlB,EAAWqB,EAAKE,QAASO,GAAU,CACrC,IAAMC,EAAOjC,EAAM,CACjBe,IAAKiB,EAAQjB,IACbC,KAAMgB,EAAQhB,KACdC,MAAOe,EAAQf,MACfC,OAAQc,EAAQd,OAChBC,MAAOa,EAAQb,MACfC,OAAQY,EAAQZ,SAKlB,OAHAG,EAAKE,QAAUQ,OAEfX,EAAQW,IAIZP,EAAUD,QAAUS,sBAAsBP,GAE5CA,GACO,WACLD,EAAUD,SAAWG,qBAAqBF,EAAUD,YAErD,CAAC7B,EAAQ6B,SAAW,KAAMvB,EAAYmB,IAElCA,G,uBC5GT,SAASc,EAAT,GAA4C,IAAxBnD,EAAuB,EAAvBA,EAAGoD,EAAoB,EAApBA,SACfC,EAAOb,mBACPc,EAAYd,mBAGZD,EAAY5B,EAAiB2C,EAAW,CAAC,QAAS,WALf,EAMjB9C,mBACtB,kBACE+B,GAAQA,EAAKJ,OAASI,EAAKH,OAAS,CAACG,EAAKJ,MAAOI,EAAKH,QAAU,CAAC,EAAG,KACtE,CAACG,IATsC,mBAMlCJ,EANkC,KAM3BC,EAN2B,KAYnCmB,EAAmB/C,mBAAQ,WAC/B,GAAI4C,GAAYjB,GAASC,EAAQ,CAAC,IACxBoB,EAASC,EAAYL,EAAU,CAAEjB,QAAOC,WAAxCoB,KACR,OAAOJ,EAASM,QAAUF,KAG3B,CAACrB,EAAOC,EAAQgB,IAEnBO,QAAQC,IAAI,CAAEL,gBAEd,IAAMM,EAAU,8CAEhBzD,qBAAU,WAER,GAAImD,GAAeD,EAAUb,QAAS,CAAC,IAEnCN,EAMOiB,EANPjB,MACAC,EAKOgB,EALPhB,OACA0B,EAIOV,EAJPU,QACAJ,EAGON,EAHPM,QACAK,EAEOX,EAFPW,QACAC,EACOZ,EADPY,UAGFV,EAAUb,QAAQwB,UAAY,GAC9B,IAAMC,EAAMlE,EAAEkE,IAAIZ,EAAUb,QAAS,CACnCiB,QAASS,KAAKC,IAAIb,EAAaG,GAC/BI,QAASK,KAAKC,IAAIb,EAAaO,GAC/BO,aAAa,EACbC,oBAAoB,EACpBC,SAAU,IAINC,EAAYN,EAAIO,UAAU,CAAC,EAAGrC,GAAS8B,EAAIQ,cAC3CC,EAAYT,EAAIO,UAAU,CAACtC,EAAO,GAAI+B,EAAIQ,cAC1CE,EAAS,IAAI5E,EAAE6E,aAAaL,EAAWG,GAwD7C,OAtDAT,EAAIY,aAAaF,GACjBV,EAAIa,QAAQ,CAACJ,EAAUK,IAAM,EAAGR,EAAUS,IAAM,GAAI1B,GAMpD,IAAIvD,EAAEkF,QAAQC,KAAK,CAAEC,SAAU,gBAAiBC,MAAMnB,GAsCtD,IAnCqBlE,EAAEsF,UAAUC,OAAO,CACtCC,WAAY,SAASC,EAAaC,GAAiB,IACzCC,EAAYF,EAAZE,EAAGC,EAASH,EAATG,EAAGC,EAAMJ,EAANI,EAEd,IAAK7B,EAAU2B,GACb,OAAOvG,SAASG,cAAc,OAJgB,kBAM3ByE,EAAU2B,GANiB,GAMzCG,EANyC,KAMnCC,EANmC,KAQhD,GAAIH,EAAI,GAAKC,EAAI,GAAKC,EAAOF,GAAKG,EAAOF,EACvC,OAAOzG,SAASG,cAAc,OAGhC,IAAIyG,EAAU,UAAGnC,EAAH,YAAcE,GACzBkC,QAAQ,MAAON,GACfM,QAAQ,MAAOL,GACfK,QAAQ,MAAOJ,GAElBlC,QAAQC,IAAI,CAAEkC,OAAMC,SAEV,IAANH,GAAiB,IAANC,GAAWD,IAAME,GAAQD,IAAME,IAC5CpC,QAAQC,IAAI,CAAEgC,IAAGC,MACjBG,EAAUA,EAAQC,QAAQ,UAAW,SAEvC,IAAIC,EAAO9G,SAASG,cAAc,OAOlC,OANA2G,EAAKzG,OAAS,WACZyG,EAAKC,MAAMhE,MAAQ,OACnB+D,EAAKC,MAAM/D,OAAS,OACpBsD,EAAK,KAAMQ,IAEbA,EAAKnH,IAAMiH,EACJE,KAIX,CAAiB,CACfpC,UACAJ,UACA0C,KAAK,EACLC,gBAAiB,QACjBC,QAAQ,EACRC,cAAe,IACdlB,MAAMnB,GAEF,WACL,IACEA,EAAIsC,SACJ,MAAOvF,SAMZ,CAAC4C,EAAST,EAAUG,EAAapB,EAAOC,IAE3C,IAAMqE,EAAiBjG,mBACrB,kBAAO2B,GAASC,EAAS,CAAED,MAAOA,EAAOC,OAAQA,GAAW,KAC5D,CAACD,EAAOC,IAEV,OACE,2BACE,uBAAKsE,UAAWC,IAAOtD,KAAMuD,IAAKvD,GAChC,uBAAKuD,IAAKtD,EAAW6C,MAAOM,MAWpC,IAAMhD,EAAc,SAClBoD,EACAC,GAEI,IADJvC,EACG,wDACYwC,EAAiCF,EAAxC1E,MAA0B6E,EAAcH,EAAtBzE,OACX6E,EAAmCH,EAA1C3E,MAA2B+E,EAAeJ,EAAvB1E,OACrB+E,EAAKF,EAAaC,EAClBE,EAAKL,EAAYC,EACnBK,EAAQF,EAAKC,EAAKJ,EAAYE,EAAaH,EAAYE,EACvDzD,EAAOW,KAAKP,IAAIyD,GAASlD,KAAKP,IAAI,GAClCW,IACFf,EAAOW,KAAKmD,KAAK9D,GACjB6D,EAAQlD,KAAKoD,IAAI,EAAG/D,IAEtB,IAAMrB,EAAQgC,KAAKmD,KAAKP,EAAYM,GAC9BjF,EAAS+B,KAAKmD,KAAKN,EAAYK,GACrC,MAAO,CACLA,QACA7D,OACA2C,MAAO,CACLhE,QACAC,SACAL,KAAMmF,EAAa9E,GAAU,EAC7BJ,MAAOiF,EAAa9E,GAAS,KC9KpBqF,EDiJf,SAAaC,GACX,IAAMzH,EAAID,IACV,OAAO,2BAAMC,EAAI,gBAACmD,EAAD,CAAUnD,EAAGA,EAAGoD,SAAUA,IAAe,O,gBExI7CsE,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAcC,KAAK,4CCILC,QACW,cAA7BtH,OAAOuH,SAASC,UAEe,UAA7BxH,OAAOuH,SAASC,UAEhBxH,OAAOuH,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAS7I,SAAS8I,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAclI,MAAMmI,MAAK,SAACC,GAClCA,EAAaC,iB,kBElInBC,EAAOC,QAAU,CAAC,KAAO,oB","file":"static/js/main.9e065bc5.chunk.js","sourcesContent":["import { useEffect, useState, useMemo } from 'react';\nimport { Map, MapOptions, LatLngExpression } from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\ninterface InitializeMap {\n  (element: string | HTMLElement, options?: MapOptions): Map;\n}\n\ninterface LatLngBounds {\n  new (southWest: LatLngExpression, northEast: LatLngExpression): any;\n}\n\nexport type Leaflet = {\n  map: InitializeMap;\n  LatLngBounds: LatLngBounds;\n  Control: any;\n  TileLayer: any;\n};\n\nconst LEAFLET_URI =\n  'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.5.1/leaflet.js';\n\nconst loadScript = (src: string) => {\n  return new Promise((resolve, reject) => {\n    const head = document.head || document.getElementsByTagName('head')[0];\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = src;\n    script.onload = resolve;\n    script.onerror = () =>\n      reject(new Error(`failed to load: ${src.split('/').pop()}`));\n    head.appendChild(script);\n  });\n};\n\nfunction useLeaflet(): Leaflet | undefined {\n  const [ready, setReady] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      // @ts-ignore\n      if (!window.L) {\n        await loadScript(LEAFLET_URI);\n      }\n      setReady(true);\n    })();\n  }, []);\n\n  let L: any;\n  try {\n    // @ts-ignore\n    L = window.L;\n  } catch (err) {\n    /* ignore */\n  }\n\n  return useMemo(() => (ready && L ? L : undefined), [ready, L]);\n}\n\nexport default useLeaflet;\n","import { useEffect, useMemo, useState, useRef, MutableRefObject } from 'react';\n\ntype ContainerRect = {\n  top: null | number;\n  left: null | number;\n  right: null | number;\n  bottom: null | number;\n  width: null | number;\n  height: null | number;\n};\n\n// type HTMLElementRef = MutableRefObject<HTMLElement | null>;\n\nconst all = ['top', 'left', 'right', 'bottom', 'width', 'height'];\n\nconst useContainerRect = (\n  elemRef: any,\n  deps?: string[] | Function,\n): ContainerRect => {\n  const dependencies = (deps || '').toString();\n  const mapFn = useMemo(\n    () => (typeof deps === 'function' ? deps : (e: any) => e),\n    [dependencies],\n  );\n\n  const hasChanged = useMemo(() => {\n    if (typeof deps === 'function') {\n      // return deps;\n\n      // const tmp = watch(tmpRect);\n\n      return (before: any, after: any) => {\n        return JSON.stringify(before) !== JSON.stringify(deps(after));\n      };\n\n      // return (rectA: any, rectB: any) => {\n      // };\n      // return hasChanged =\n      //   JSON.stringify(rect.current) !== JSON.stringify(watch(tmpRect));\n    }\n    const items = (deps || []).filter((e: string) => all.indexOf(e) !== -1);\n    const watch = items.length > 0 ? items : all;\n\n    return (before: any, after: any) => {\n      return watch.reduce(\n        (prev: boolean, key: string) => prev || before[key] !== after[key],\n        false,\n      );\n    };\n  }, [(deps || []).toString()]);\n\n  const [rect_, setRect] = useState<any>(() =>\n    mapFn({\n      top: null,\n      left: null,\n      right: null,\n      bottom: null,\n      width: null,\n      height: null,\n    }),\n  );\n\n  const rect = useRef<any>();\n  rect.current = rect_;\n\n  const requestId = useRef<number>();\n\n  useEffect(() => {\n    const checkRect = () => {\n      requestId.current && cancelAnimationFrame(requestId.current);\n      if (elemRef.current && elemRef.current.parentNode) {\n        const elemRect = elemRef.current.parentNode.getBoundingClientRect();\n        // let hasChanged: boolean;\n        // let next;\n        const tmpRect: any = {\n          top: elemRect.top,\n          left: elemRect.left,\n          right: elemRect.right,\n          bottom: elemRect.bottom,\n          width: elemRect.width,\n          height: elemRect.height,\n        };\n\n        // if (typeof hasChanged === 'function') {\n        //   // next = watch()\n        //   const tmp = hasChanged(tmpRect);\n        //   hasChanged =\n        //     JSON.stringify(rect.current) !==\n        //     JSON.stringify(hasChanged(tmpRect));\n        //   // console.log(\n        //   //   'case 1',\n        //   //   hasChanged,\n        //   //   JSON.stringify(rect.current),\n        //   //   JSON.stringify(watch(tmpRect)),\n        //   // );\n        //   rect.current = tmp;\n        // } else {\n        //   hasChanged = hasChanged.reduce(\n        //     (prev: boolean, key: string) =>\n        //       prev || rect.current[key] !== tmpRect[key],\n        //     false,\n        //   );\n        // }\n\n        if (hasChanged(rect.current, tmpRect)) {\n          const next = mapFn({\n            top: tmpRect.top,\n            left: tmpRect.left,\n            right: tmpRect.right,\n            bottom: tmpRect.bottom,\n            width: tmpRect.width,\n            height: tmpRect.height,\n          });\n          rect.current = next;\n          // console.log('>>>>> ', next);\n          setRect(next);\n          return;\n        }\n      }\n      requestId.current = requestAnimationFrame(checkRect);\n    };\n    checkRect();\n    return () => {\n      requestId.current && cancelAnimationFrame(requestId.current);\n    };\n  }, [elemRef.current || null, hasChanged, rect_]);\n\n  return rect_;\n};\n\nexport default useContainerRect;\n","import * as React from 'react';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  SyntheticEvent,\n} from 'react';\nimport useLeaflet, { Leaflet } from './useLeaflet';\nimport useContainerRect from './useContainerRect';\nimport styles from './Map.module.scss';\nimport deepzoom from './map.json';\n\ntype IProps = {\n  L: Leaflet;\n  deepzoom: any;\n};\n\nfunction MapInner({ L, deepzoom }: IProps) {\n  const root = useRef<any>();\n  const container = useRef<any>();\n\n  // get container size info\n  const rect: any = useContainerRect(container, ['width', 'height']);\n  const [width, height] = useMemo(\n    () =>\n      rect && rect.width && rect.height ? [rect.width, rect.height] : [0, 0],\n    [rect],\n  );\n\n  const defaultZoom: any = useMemo(() => {\n    if (deepzoom && width && height) {\n      const { zoom } = getSizeInfo(deepzoom, { width, height });\n      return deepzoom.maxZoom - zoom;\n    }\n    return undefined;\n  }, [width, height, deepzoom]);\n\n  console.log({ defaultZoom });\n\n  const fileURI = 'https://bluewings.github.io/koholint/assets';\n\n  useEffect(() => {\n    // initialize leaflet viewer\n    if (defaultZoom && container.current) {\n      const {\n        width,\n        height,\n        minZoom,\n        maxZoom,\n        tileImg,\n        tileSizes,\n      }: any = deepzoom;\n\n      container.current.innerHTML = '';\n      const map = L.map(container.current, {\n        maxZoom: Math.max(defaultZoom, maxZoom),\n        minZoom: Math.max(defaultZoom, minZoom),\n        zoomControl: false,\n        attributionControl: false,\n        zoomSnap: 0,\n      });\n\n      // define the area of the map to display based on the original width\n      const southWest = map.unproject([0, height], map.getMaxZoom());\n      const northEast = map.unproject([width, 0], map.getMaxZoom());\n      const bounds = new L.LatLngBounds(southWest, northEast);\n\n      map.setMaxBounds(bounds);\n      map.setView([northEast.lng / 2, southWest.lat / 2], defaultZoom);\n\n      // map.addEventListener('movestart', moveStart);\n      // map.addEventListener('moveend', moveEnd);\n\n      // add zoom control\n      new L.Control.Zoom({ position: 'bottomright' }).addTo(map);\n\n      // apply a custom tile layer.\n      const MapTileLayer = L.TileLayer.extend({\n        createTile: function(coords: any, done: Function) {\n          const { z, x, y } = coords;\n          // do not provide an image beyond the supported range\n          if (!tileSizes[z]) {\n            return document.createElement('div');\n          }\n          const [maxX, maxY] = tileSizes[z];\n          // do not provide an image if there are no tiles in that area\n          if (x < 0 || y < 0 || maxX < x || maxY < y) {\n            return document.createElement('div');\n          }\n\n          let tileSrc = `${fileURI}/${tileImg}`\n            .replace(/{z}/, z)\n            .replace(/{x}/, x)\n            .replace(/{y}/, y);\n\n          console.log({ maxX, maxY });\n\n          if (x === 0 || y === 0 || x === maxX || y === maxY) {\n            console.log({ x, y });\n            tileSrc = tileSrc.replace(/\\.jpeg$/, '.png');\n          }\n          var tile = document.createElement('img');\n          tile.onload = () => {\n            tile.style.width = 'auto';\n            tile.style.height = 'auto';\n            done(null, tile);\n          };\n          tile.src = tileSrc;\n          return tile;\n        },\n      });\n\n      new MapTileLayer({\n        minZoom,\n        maxZoom,\n        tms: false,\n        continuousWorld: 'false',\n        noWrap: false,\n        defaultRadius: 1,\n      }).addTo(map);\n\n      return () => {\n        try {\n          map.remove();\n        } catch (e) {\n          /* ignore */\n        }\n      };\n    }\n    return undefined;\n  }, [fileURI, deepzoom, defaultZoom, width, height]);\n\n  const containerStyle = useMemo(\n    () => (width && height ? { width: width, height: height } : {}),\n    [width, height],\n  );\n  return (\n    <div>\n      <div className={styles.root} ref={root}>\n        <div ref={container} style={containerStyle}></div>\n      </div>\n    </div>\n  );\n}\n\nfunction Map(props: any) {\n  const L = useLeaflet();\n  return <div>{L ? <MapInner L={L} deepzoom={deepzoom} /> : null}</div>;\n}\n\nconst getSizeInfo = (\n  deepzoomSize: any,\n  containerSize: any,\n  zoomSnap = false,\n) => {\n  const { width: deepzoomW, height: deepzoomH } = deepzoomSize;\n  const { width: containerW, height: containerH } = containerSize;\n  const r1 = containerW / containerH;\n  const r2 = deepzoomW / deepzoomH;\n  let scale = r1 > r2 ? deepzoomH / containerH : deepzoomW / containerW;\n  let zoom = Math.log(scale) / Math.log(2);\n  if (zoomSnap) {\n    zoom = Math.ceil(zoom);\n    scale = Math.pow(2, zoom);\n  }\n  const width = Math.ceil(deepzoomW / scale);\n  const height = Math.ceil(deepzoomH / scale);\n  return {\n    scale,\n    zoom,\n    style: {\n      width,\n      height,\n      top: (containerH - height) / 2,\n      left: (containerW - width) / 2,\n    },\n  };\n};\n\nexport default Map;\n","import Map from './Map';\n\nexport default Map;\n","import React from 'react';\nimport Map from './Map';\nimport GithubCorner from 'react-github-corner';\n\nfunction App() {\n  return (\n    <div>\n      <Map />\n      <GithubCorner href=\"https://github.com/bluewings/koholint\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Map_root__1b4eQ\"};"],"sourceRoot":""}