{"version":3,"sources":["Map/useLeaflet.ts","Map/Map.tsx","Map/index.ts","App.tsx","serviceWorker.js","index.tsx","Map/Map.module.scss"],"names":["LEAFLET_URI","loadScript","src","Promise","resolve","reject","head","document","getElementsByTagName","script","createElement","type","onload","onerror","Error","split","pop","appendChild","useLeaflet","L","useState","ready","setReady","useEffect","a","window","err","useMemo","undefined","Map","props","console","log","className","styles","root","App","href","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","then","registration","unregister","module","exports"],"mappings":"qNAmBMA,G,MAAc,mEAEdC,EAAa,SAACC,GAClB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAOC,SAASD,MAAQC,SAASC,qBAAqB,QAAQ,GAC9DC,EAASF,SAASG,cAAc,UACtCD,EAAOE,KAAO,kBACdF,EAAOP,IAAMA,EACbO,EAAOG,OAASR,EAChBK,EAAOI,QAAU,kBAAMR,EAAO,IAAIS,MAAJ,0BAA6BZ,EAAIa,MAAM,KAAKC,UAC1EV,EAAKW,YAAYR,OA4BNS,MAxBf,WAA4C,IAatCC,EAbqC,EACfC,oBAAS,GADM,mBAClCC,EADkC,KAC3BC,EAD2B,KAGzCC,qBAAU,WACR,sBAAC,sBAAAC,EAAA,yDAEMC,OAAON,EAFb,gCAGSlB,EAAWD,GAHpB,OAKCsB,GAAS,GALV,0CAAD,KAOC,IAGH,IAEEH,EAAIM,OAAON,EACX,MAAOO,IAIT,OAAOC,mBAAQ,kBAAON,GAASF,EAAIA,OAAIS,IAAY,CAACP,EAAOF,K,gBCvC9CU,ICbAA,EDEf,SAAaC,GACX,IAAMX,EAAID,IAGV,OADAa,QAAQC,IAAIb,GAEV,uBAAKc,UAAWC,IAAOC,Q,gBEIZC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAcC,KAAK,4CCILC,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MAAM,2DCVnCC,IAASC,OAAO,kBAAC,EAAD,MAASpC,SAASqC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAczB,MAAM0B,MAAK,SAACC,GAClCA,EAAaC,iB,kBE3HnBC,EAAOC,QAAU,CAAC,KAAO,oB","file":"static/js/main.1fdfc404.chunk.js","sourcesContent":["import { useEffect, useState, useMemo } from 'react';\nimport { Map, MapOptions, LatLngExpression } from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\ninterface InitializeMap {\n  (element: string | HTMLElement, options?: MapOptions): Map;\n}\n\ninterface LatLngBounds {\n  new (southWest: LatLngExpression, northEast: LatLngExpression): any;\n}\n\nexport type Leaflet = {\n  map: InitializeMap;\n  LatLngBounds: LatLngBounds;\n  Control: any;\n  TileLayer: any;\n};\n\nconst LEAFLET_URI = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.5.1/leaflet.js';\n\nconst loadScript = (src: string) => {\n  return new Promise((resolve, reject) => {\n    const head = document.head || document.getElementsByTagName('head')[0];\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = src;\n    script.onload = resolve;\n    script.onerror = () => reject(new Error(`failed to load: ${src.split('/').pop()}`));\n    head.appendChild(script);\n  });\n};\n\nfunction useLeaflet(): Leaflet | undefined {\n  const [ready, setReady] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      // @ts-ignore\n      if (!window.L) {\n        await loadScript(LEAFLET_URI);\n      }\n      setReady(true);\n    })();\n  }, []);\n\n  let L: any;\n  try {\n    // @ts-ignore\n    L = window.L;\n  } catch (err) {\n    /* ignore */\n  }\n\n  return useMemo(() => (ready && L ? L : undefined), [ready, L]);\n}\n\nexport default useLeaflet;\n","import * as React from 'react';\nimport useLeaflet from './useLeaflet';\nimport styles from './Map.module.scss';\n\nfunction Map(props: any) {\n  const L = useLeaflet();\n\n  console.log(L);\n  return (\n    <div className={styles.root}>\n      {/* <h1>koholint</h1> */}\n    </div>\n  );\n}\n\nexport default Map;\n","import Map from './Map';\n\nexport default Map;\n","import React from 'react';\nimport Map from './Map';\nimport GithubCorner from 'react-github-corner';\n\nfunction App() {\n  return (\n    <div>\n      <Map />\n      <GithubCorner href=\"https://github.com/bluewings/koholint\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Map_root__1b4eQ\"};"],"sourceRoot":""}